#include <bits/stdc++.h>
using namespace std;
int dp[1000001];
int main()
{
    int n;
    cin >> n;
    for (int i = 2; i <= n; i++)
    {
        dp[i] = dp[i - 1] + 1;
        if (!(i % 3)) // 3으로 나누어질 때
            dp[i] = min(dp[i], dp[i / 3] + 1);
        if (!(i % 2)) // 2로 나누어질 때
            dp[i] = min(dp[i], dp[i / 2] + 1);
    }
    cout << dp[n] << '\n';
    return 0;
}
/*
N을 1로 만들 때 3가지 연산 방법
- (N%3 == 0)일 때 N/3
- (N%2 == 0)일 때 N/2
- N-1

어떤 수는 2와 3이 나누어떨어지지 않는 수이기도 하고, 어떤 수는 3만 나누어 떨어질 수 있다.
따라서 해당하는 것들을 전부 계산한 뒤 최소값을 넣어주자.
예시)
1 = 0
2 = 1 , (1의 값+1) 또는 2로 나누어지므로 (2/2의 값+1) 둘 중 하나를 고름
3 = 1 , (2의 값+1) 또는 3로 나누어지므로 (3/3의 값+1) 둘 중 하나를 고름
4 = 2 , (3의 값+1) 또는 2로 나누어지므로 (4/2의 값+1) 둘 중 하나를 고름
5 = 3 , (4의 값+1) 만 해당
6 = 2 , (5의 값+1) 또는 2로 나누어지므로 (6/2의 값+1) 또는 3로 나누어지므로 (6/3의 값+1) 셋 중 하나를 고름
7 = 3
8 = 3
9 = 2
10 = 3
위 1 ~ 10까지의 정수가 입력됐을 때 최소 연산 횟수는 우측과 같다.
*/