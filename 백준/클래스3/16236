#include <bits/stdc++.h>
using namespace std;
int _map[22][22];
int n;
int bx, by, sz = 2;      // 상어 위치와 크기
int stop, eat, ret, cnt; // 먹을 물고기가 없는 경우, 한마리먹은경우, 총걸린시간, 물고기 먹은 횟수
int dx[4] = {0, -1, 1, 0};
int dy[4] = {-1, 0, 0, 1};
void bfs(int a, int b, int visited[][22], int shSize)
{
    queue<pair<pair<int, int>, int>> q;
    q.push({{a, b}, 0});
    visited[b][a] = 1;
    int temp; // 한 마리를 먹는데 걸린 시간
    while (!q.empty())
    {
        int x = q.front().first.first;  // 열 좌표
        int y = q.front().first.second; // 행 좌표
        int cnt = q.front().second;     // 현재 시간
        // 가장 위쪽을 먼저 그 다음 왼쪽을 우선적으로 먹는 것을 고려
        if (_map[y][x] > 0 && _map[y][x] < shSize && temp == cnt)
        {
            if ((by > y) || (by == y && bx > x))
            {
                by = y; // 물고기를 먹은 상어 위치 저장
                bx = x;
                continue;
            }
        }
        q.pop();
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[ny][nx])
            {
                if (_map[ny][nx] <= shSize) // 지나가거나 먹을 수 있는 경우
                {
                    if (_map[ny][nx] > 0 && _map[ny][nx] < shSize && !eat) // 물고기를 먹을 수 있는 경우
                    {
                        eat = 1; // 한마리 먹음
                        bx = nx; // 시작 위치를 물고기 먹은 위치로
                        by = ny;
                        temp = cnt + 1; // 한마리 먹는데 걸린 시간
                        ret += temp;    // 총 시간에 추가
                    }
                    else // 물고기 못먹는 경우
                    {
                        q.push({{nx, ny}, cnt + 1});
                        visited[ny][nx] = 1;
                    }
                }
            }
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
        {
            cin >> _map[i][j];
            if (_map[i][j] == 9)
            {
                by = i;
                bx = j;
                _map[i][j] = 0;
            }
        }

    while (!stop)
    {
        int visited[22][22] = {0};
        bfs(bx, by, visited, sz);
        // 먹었을 경우
        if (eat)
        {
            eat = 0;
            cnt++;            // 현재 크기에서 물고기 먹은 횟수 증가
            _map[by][bx] = 0; // 먹은 물고기 삭제
            if (cnt == sz)    // 상어 크기가 증가하는 경우
            {
                sz++;
                cnt = 0;
            }
        }
        else // 한 마리도 못먹는 경우
        {
            stop = 1; // 종료
        }
    }

    cout << ret << '\n';
    return 0;
}
/*
- 상어는 물고기 크기보다 크면 먹을 수 있음
- 상어와 물고기 크기가 같으면 지나갈 수 있음
- 상어가 물고기 크기보다 작으면 못지나감
- 물고기를 먹으면 빈칸
- 상어가 물고기를 먹은 횟수와 상어의 크기가 같게되면 상어 크기 1증가
- 물고기 먹을 때
  1. 가장 작은것 우선
  2. 같은 크기가 많다면 가장 위쪽 우선하고 그 다음 왼쪽 우선
- 한 칸 움직일 때마다 1초 지나가고, 먹을 수 있는 물고기칸에 도착하면 즉시 먹음
- 먹을 물고기가 없을 때까지 걸리는 시간 구하기

해결방법
- 물고기 한 마리 먹을때까지 bfs 탐색하여 먹기
- 다시 bfs를 넣어서 또 한 마리 먹을때까지 탐색
- bfs 내부는 먹을 물고기 찾으면 그 위치 저장하고 다른 같은 크기의 같은 시간이 걸리는 물고기 중에서 가장 위쪽, 왼쪽에 있는 좌표가 있다면 그 좌표에 있는 물고기 먹도록 구현
*/