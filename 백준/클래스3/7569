#include <bits/stdc++.h>
using namespace std;
int box[101][101][101], m, n, h, result;
queue<tuple<int, int, int>> q; // 세가지 이상의 값을 넣을 때 쓰는 tuple
int dx[6] = {0, 0, 0, 1, 0, -1};
int dy[6] = {0, 0, 1, 0, -1, 0};
int dz[6] = {1, -1, 0, 0, 0, 0};
void bfs()
{
    while (!q.empty())
    {
        int z, x, y;
        tie(z, x, y) = q.front();
        q.pop();
        for (int i = 0; i < 6; i++)
        {
            // 위 아래 왼쪽 오른쪽 앞 뒤 여섯 방향 토마토 검증
            int nz = z + dz[i];
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nz < 0 || nz >= h || nx < 0 || nx >= n || ny < 0 || ny >= m)
                continue;
            if (box[nz][nx][ny] == -1 || box[nz][nx][ny] >= 1)
                continue;
            box[nz][nx][ny] = box[z][x][y] + 1;
            q.push({nz, nx, ny});
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> m >> n >> h;
    for (int k = 0; k < h; k++)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                cin >> box[k][i][j];
                if (box[k][i][j] == 1)
                    q.push({k, i, j});
            }
        }
    }
    bfs();
    for (int k = 0; k < h; k++)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (box[k][i][j] == 0)
                {
                    cout << -1 << '\n';
                    return 0;
                }
                result = max(result, box[k][i][j]);
            }
        }
    }
    cout << result - 1 << '\n';
    return 0;
}