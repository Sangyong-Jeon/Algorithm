#include <bits/stdc++.h>
using namespace std;
int n, m;
string fac[101][101];

string addBigNum(string n1, string n2)
{
    int sum = 0;
    string ret;

    // 1의 자리부터 더하기
    while (!n1.empty() || !n2.empty() || sum)
    {
        if (!n1.empty())
        {
            sum += n1.back() - '0';
            n1.pop_back();
        }
        if (!n2.empty())
        {
            sum += n2.back() - '0';
            n2.pop_back();
        }
        ret.push_back((sum % 10) + '0');
        sum /= 10;
    }

    // 1의 자리부터 push했으므로 뒤집어줌
    reverse(ret.begin(), ret.end());
    return ret;
}

string combi(int n, int r)
{
    if (n == r || r == 0)
        return "1";
    string &ret = fac[n][r]; // 참조형 변수

    // 이미 계산했으면 바로 return, memoization 기법
    if (ret != "")
        return ret;

    // 파스칼삼각형 원리 이용
    ret = addBigNum(combi(n - 1, r - 1), combi(n - 1, r));
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    cout << combi(n, m) << '\n';
}

/*
파스칼 삼각형의 알고리즘
0C0 = 1
1C0 = 1 , 1C1 = 1
2C0 = 1 , 2C1 = 2 , 2C2 = 1
3C0 = 1 , 3C1 = 3 , 3C2 = 3 , 3C3 = 1
4C0 = 1 , 4C1 = 4 , 4C2 = 6 , 4C3 = 4 , 4C4 = 1
...

파스칼 삼각형 알고리즘 점화식
dp[n][r] = dp[n-1][r-1] + dp[n-1][r]

이 때, n == r 또는 r == 0 이라면 모두 1
*/