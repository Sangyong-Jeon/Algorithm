#include <bits/stdc++.h>
using namespace std;
const int INF = 987654321;
int n, m, h, a, b, ret = INF, visited[34][34];
bool check()
{
    for (int i = 1; i <= n; i++)
    {
        int start = i;
        for (int j = 1; j <= h; j++)
        {
            if (visited[j][start])
                start++;
            else if (visited[j][start - 1])
                start--;
        }
        if (start != i)
            return false;
    }
    return true;
}
void go(int here, int cnt)
{
    if (cnt > 3 || cnt >= ret) // 추가 사다리가 3 이상이거나 ret(최솟값)보다 클 때
        return;
    if (check()) // 모든 i번 세로줄이 i번으로 나올 때
    {
        ret = min(ret, cnt);
        return;
    }
    for (int i = here; i <= h; i++) // here번 가로줄부터 h 가로줄까지 반복
    {
        for (int j = 1; j <= n; j++) // 1번부터 n번 세로줄까지 반복
        {
            if (visited[i][j] || visited[i][j - 1] || visited[i][j + 1]) // 다음 세로줄과 연결 or 이전 세로줄과 연결 or 연속해서 가로줄이 될 때
                continue;
            visited[i][j] = 1; // 사다리 추가
            go(i, cnt + 1);    // 사다리 추가 후 재귀
            visited[i][j] = 0; // 추가한 사다리 제거
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m >> h;
    for (int i = 0; i < m; i++)
    {
        cin >> a >> b;
        visited[a][b] = 1; // b번과 b+1번이 a번 가로줄에 연결됨
    }
    go(1, 0); // 1번 가로줄에 사다리 추가 0번으로 시작
    cout << ((ret == INF) ? -1 : ret) << "\n";
    return 0;
}