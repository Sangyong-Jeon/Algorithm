#include <bits/stdc++.h>
using namespace std;
#define y1 aaaa
int a[104][104], visited[104][104];
int x1, y1, x2, y2, m, n, k;
const int dy[4] = {-1, 0, 1, 0};
const int dx[4] = {0, 1, 0, -1};
vector<int> ret;
int dfs(int y, int x)
{
    visited[y][x] = 1;
    int ret = 1;
    for (int i = 0; i < 4; i++)
    {
        int ny = y + dy[i];
        int nx = x + dx[i];
        if (ny < 0 || ny >= m || nx < 0 || nx >= n || visited[ny][nx] == 1)
            continue;
        if (a[ny][nx] == 1)
            continue;
        ret += dfs(ny, nx);
    }
    return ret;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> m >> n >> k;
    for (int i = 0; i < k; i++)
    {
        cin >> x1 >> y1 >> x2 >> y2;
        for (int x = x1; x < x2; x++)
            for (int y = y1; y < y2; y++)
                a[y][x] = 1;
    }
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            if (a[i][j] != 1 & visited[i][j] == 0)
                ret.push_back(dfs(i, j));
    sort(ret.begin(), ret.end());
    cout << ret.size() << "\n";
    for (int a : ret)
        cout << a << " ";
    return 0;
}
/*
#include <bits/stdc++.h>
using namespace std;
int m, n, k, lx, ly, rx, ry, ret;
int a[101][101], visited[101][101];
int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0};
vector<int> area;
int dfs(int x, int y)
{
    int cnt = 1;
    visited[x][y] = 1;
    for (int i = 0; i < 4; i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx < 0 || ny < 0 || nx >= n || ny >= m)
            continue;
        if (!visited[nx][ny] && a[nx][ny] == 0)
            cnt += dfs(nx, ny);
    }
    return cnt;
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> m >> n >> k;
    for (int i = 0; i < k; i++)
    {
        cin >> lx >> ly >> rx >> ry;
        for (int j = lx; j < rx; j++)
        {
            for (int k = ly; k < ry; k++)
            {
                a[j][k] = 1;
            }
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (a[i][j] == 0 && !visited[i][j])
            {
                area.push_back(dfs(i, j));
                ret++;
            }
        }
    }
    cout << ret << '\n';
    sort(area.begin(), area.end());
    for (int v : area)
        cout << v << " ";
    cout << '\n';
    return 0;
}
*/